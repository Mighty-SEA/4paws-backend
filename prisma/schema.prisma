// Datasource & Generator
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum AccountRole {
  MASTER
  SUPERVISOR
}

enum JobRole {
  SUPERVISOR
  DOCTOR
  PARAVET
}

enum BookingStatus {
  PENDING
  CONFIRMED
  WAITING_TO_DEPOSIT
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum InventoryType {
  IN
  ADJUSTMENT
  OUT
}

// Models (initial scope for Backend 1)
model User {
  id           Int     @id @default(autoincrement())
  username     String  @unique
  passwordHash String
  accountRole  AccountRole @default(SUPERVISOR)
  // Every user must be a staff
  staffId      Int   @unique
  staff        Staff @relation(fields: [staffId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Staff {
  id     Int   @id @default(autoincrement())
  name   String
  jobRole JobRole @default(SUPERVISOR)
  // A staff may not have a user
  user   User?
  // Reverse relations
  visitsAsDoctor Visit[]        @relation("VisitDoctor")
  visitsAsParavet Visit[]       @relation("VisitParavet")
  examinationsAsDoctor Examination[] @relation("ExaminationDoctor")
  examinationsAsParavet Examination[] @relation("ExaminationParavet")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// Backend 2: Owners & Pets
model Owner {
  id        Int     @id @default(autoincrement())
  name      String
  phone     String
  email     String?
  address   String
  pets      Pet[]
  bookings  Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pet {
  id        Int     @id @default(autoincrement())
  ownerId   Int
  name      String
  species   String
  breed     String
  birthdate DateTime
  owner     Owner   @relation(fields: [ownerId], references: [id])
  bookingPets BookingPet[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Backend 3: Services & Service Types
model Service {
  id        Int            @id @default(autoincrement())
  name      String         @unique
  types     ServiceType[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceType {
  id           Int      @id @default(autoincrement())
  serviceId    Int
  name         String
  price        Decimal  @db.Decimal(12,2)
  pricePerDay  Decimal? @db.Decimal(12,2)
  service      Service  @relation(fields: [serviceId], references: [id])
  bookings     Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// Backend 4: Bookings
model Booking {
  id            Int            @id @default(autoincrement())
  ownerId       Int
  serviceTypeId Int
  status        BookingStatus  @default(PENDING)
  // optional dates for hotel/rawat inap etc.
  startDate     DateTime? 
  endDate       DateTime?
  proceedToAdmission Boolean   @default(false)

  owner         Owner          @relation(fields: [ownerId], references: [id])
  serviceType   ServiceType    @relation(fields: [serviceTypeId], references: [id])
  pets          BookingPet[]
  deposits      Deposit[]
  payments      Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookingPet {
  id        Int     @id @default(autoincrement())
  bookingId Int
  petId     Int

  booking   Booking @relation(fields: [bookingId], references: [id])
  pet       Pet     @relation(fields: [petId], references: [id])
  examinations Examination[]
  visits       Visit[]
  dailyCharges DailyCharge[]
  mixUsages    MixUsage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Backend 5: Examinations + Product Usage (awal)
model Examination {
  id           Int           @id @default(autoincrement())
  bookingPetId Int
  weight       Decimal?      @db.Decimal(5,2)
  temperature  Decimal?      @db.Decimal(4,1)
  notes        String?
  chiefComplaint String?
  additionalNotes String?
  diagnosis    String?
  prognosis    String?
  // Assigned medical staff
  doctorId     Int?
  paravetId    Int?

  bookingPet   BookingPet    @relation(fields: [bookingPetId], references: [id])
  productUsages ProductUsage[]
  doctor       Staff?        @relation("ExaminationDoctor", fields: [doctorId], references: [id])
  paravet      Staff?        @relation("ExaminationParavet", fields: [paravetId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductUsage {
  id             Int         @id @default(autoincrement())
  examinationId  Int?
  visitId        Int?
  productName    String
  quantity       Decimal     @db.Decimal(12,2)
  unitPrice      Decimal?    @db.Decimal(12,2)

  examination    Examination? @relation(fields: [examinationId], references: [id])
  visit          Visit?       @relation(fields: [visitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Backend 6: Products & Inventory (awal)
model Product {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  unit      String      @default("unit") // primary unit for restock/sell e.g., botol, kaplet
  price     Decimal     @default(0) @db.Decimal(12,2)
  unitContentAmount Decimal? @db.Decimal(12,4) // e.g., 100
  unitContentName   String?  // e.g., ml, tablet
  inventory Inventory[]
  mixComponents MixComponent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Inventory {
  id         Int           @id @default(autoincrement())
  productId  Int
  quantity   Decimal       @db.Decimal(14,4) // stored in base units
  type       InventoryType
  note       String?

  product    Product       @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Backend 11: Mix Products
model MixProduct {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  price       Decimal        @default(0) @db.Decimal(12,2)
  components  MixComponent[]
  usages      MixUsage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MixComponent {
  id           Int        @id @default(autoincrement())
  mixProductId Int
  productId    Int
  quantityBase Decimal    @db.Decimal(12,4)

  mixProduct   MixProduct @relation(fields: [mixProductId], references: [id])
  product      Product    @relation(fields: [productId], references: [id])
}

model MixUsage {
  id           Int        @id @default(autoincrement())
  bookingPetId Int
  mixProductId Int
  quantity     Decimal    @db.Decimal(12,4)
  visitId      Int?
  unitPrice    Decimal?   @db.Decimal(12,2)

  bookingPet   BookingPet @relation(fields: [bookingPetId], references: [id])
  mixProduct   MixProduct @relation(fields: [mixProductId], references: [id])
  visit        Visit?     @relation(fields: [visitId], references: [id])

  createdAt DateTime @default(now())
}

// Backend 7: Visits (catatan kunjungan harian)
model Visit {
  id           Int        @id @default(autoincrement())
  bookingPetId Int
  visitDate    DateTime   @default(now())
  weight       Decimal?   @db.Decimal(5,2)
  temperature  Decimal?   @db.Decimal(4,1)
  notes        String?
  // Satwagia-like extra fields
  doctorId     Int?
  paravetId    Int?
  urine        String?
  defecation   String?
  appetite     String?
  condition    String?
  symptoms     String?

  bookingPet   BookingPet @relation(fields: [bookingPetId], references: [id])
  doctor       Staff?     @relation("VisitDoctor", fields: [doctorId], references: [id])
  paravet      Staff?     @relation("VisitParavet", fields: [paravetId], references: [id])
  productUsages ProductUsage[]
  mixUsages    MixUsage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Backend 8: Deposits (setoran awal untuk layanan per-hari)
model Deposit {
  id         Int        @id @default(autoincrement())
  bookingId  Int
  amount     Decimal    @db.Decimal(12,2)
  method     String?
  depositDate DateTime  @default(now())
  estimatedTotal Decimal? @db.Decimal(12,2)
  estimatedEndDate DateTime?

  booking    Booking    @relation(fields: [bookingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Backend 9: Daily Charges
model DailyCharge {
  id           Int        @id @default(autoincrement())
  bookingPetId Int
  chargeDate   DateTime   @default(now())
  amount       Decimal    @db.Decimal(12,2)
  description  String?

  bookingPet   BookingPet @relation(fields: [bookingPetId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Backend 10: Payments
model Payment {
  id         Int        @id @default(autoincrement())
  bookingId  Int
  paymentDate DateTime  @default(now())
  total      Decimal    @db.Decimal(12,2)
  method     String?
  invoiceNo  String?

  booking    Booking    @relation(fields: [bookingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


