// Datasource & Generator
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  MANAGER
  DOCTOR
  PARAVET
  GROOMER
  CASHIER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum InventoryType {
  IN
  ADJUSTMENT
}

// Models (initial scope for Backend 1)
model User {
  id           Int     @id @default(autoincrement())
  username     String  @unique
  passwordHash String
  role         Role
  staff        Staff?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Staff {
  id     Int   @id @default(autoincrement())
  userId Int   @unique
  name   String
  role   Role
  user   User  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// Backend 2: Owners & Pets
model Owner {
  id        Int     @id @default(autoincrement())
  name      String
  phone     String
  address   String
  pets      Pet[]
  bookings  Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pet {
  id        Int     @id @default(autoincrement())
  ownerId   Int
  name      String
  species   String
  breed     String
  birthdate DateTime
  owner     Owner   @relation(fields: [ownerId], references: [id])
  bookingPets BookingPet[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Backend 3: Services & Service Types
model Service {
  id        Int            @id @default(autoincrement())
  name      String         @unique
  types     ServiceType[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceType {
  id           Int      @id @default(autoincrement())
  serviceId    Int
  name         String
  price        Decimal  @db.Decimal(12,2)
  pricePerDay  Decimal? @db.Decimal(12,2)
  service      Service  @relation(fields: [serviceId], references: [id])
  bookings     Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// Backend 4: Bookings
model Booking {
  id            Int            @id @default(autoincrement())
  ownerId       Int
  serviceTypeId Int
  status        BookingStatus  @default(PENDING)
  // optional dates for hotel/rawat inap etc.
  startDate     DateTime? 
  endDate       DateTime?

  owner         Owner          @relation(fields: [ownerId], references: [id])
  serviceType   ServiceType    @relation(fields: [serviceTypeId], references: [id])
  pets          BookingPet[]
  deposits      Deposit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookingPet {
  id        Int     @id @default(autoincrement())
  bookingId Int
  petId     Int

  booking   Booking @relation(fields: [bookingId], references: [id])
  pet       Pet     @relation(fields: [petId], references: [id])
  examinations Examination[]
  visits       Visit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Backend 5: Examinations + Product Usage (awal)
model Examination {
  id           Int           @id @default(autoincrement())
  bookingPetId Int
  weight       Decimal?      @db.Decimal(5,2)
  temperature  Decimal?      @db.Decimal(4,1)
  notes        String?

  bookingPet   BookingPet    @relation(fields: [bookingPetId], references: [id])
  productUsages ProductUsage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductUsage {
  id             Int        @id @default(autoincrement())
  examinationId  Int
  productName    String
  quantity       Decimal    @db.Decimal(12,2)

  examination    Examination @relation(fields: [examinationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Backend 6: Products & Inventory (awal)
model Product {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  unit      String      @default("unit") // primary unit for restock/sell e.g., botol, kaplet
  unitContentAmount Decimal? @db.Decimal(12,4) // e.g., 100
  unitContentName   String?  // e.g., ml, tablet
  inventory Inventory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Inventory {
  id         Int           @id @default(autoincrement())
  productId  Int
  quantity   Decimal       @db.Decimal(14,4) // stored in base units
  type       InventoryType
  note       String?

  product    Product       @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Backend 7: Visits (catatan kunjungan harian)
model Visit {
  id           Int        @id @default(autoincrement())
  bookingPetId Int
  visitDate    DateTime   @default(now())
  weight       Decimal?   @db.Decimal(5,2)
  temperature  Decimal?   @db.Decimal(4,1)
  notes        String?

  bookingPet   BookingPet @relation(fields: [bookingPetId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Backend 8: Deposits (setoran awal untuk layanan per-hari)
model Deposit {
  id         Int        @id @default(autoincrement())
  bookingId  Int
  amount     Decimal    @db.Decimal(12,2)
  method     String?
  depositDate DateTime  @default(now())

  booking    Booking    @relation(fields: [bookingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


